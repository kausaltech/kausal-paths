# Required nodes from outside the framework:
# net_emissions
# electricity_production_emission_factor
# Required dimensions from outside the framework:
# building_energy_class
# heating_type
# ghg
# scope
# Required parameters from outside the framework:

dimensions:

- id: building_energy_class
  label: Building energy class
  categories:
  - id: new_standard
    label: New, standard
  - id: new_top_performance
    label: New, top performance
  - id: old_no_renovations
    label: Old, no renovation
  - id: minor_renovation
    aliases: [minor_renovations]
    label: Old, minor heating renovation
  - id: major_renovation
    aliases: [major_renovations]
    label: Old, extensive heating renovation
  - id: no_improvement  # TODO Remove redundant
    label: No improvement
  - id: minor_improvements
    label: Minor improvements
  - id: aggressive_improvements
    label: Aggressive improvements
  - id: moderate_improvements
    label: Moderate improvements
  - id: nzeb
    label: Net zero emission buildings
  - id: moderate_renovation
    aliases: [moderate_renovations]
    label: Moderate renovation

- id: heating_type
  label: Heating type
  categories:
  - id: district_heating
    label: District heating
  - id: local_heating
    label: Local heating

nodes:

# * = data is in the city request dataset
# Model inputs: 176* 519 257* 254* 532 544 545 272* 273* 278 290 296..299* 302..305* 319..322* 586
# 3.4 heat generation: (coming from model inputs) 19 25 248 259

- id: building_emissions
  name: Building emissions
  description: 'This module (all nodes upstream) is based on the excel sheets 3.0 - 3.4 Building & heat levers.'
  type: simple.AdditiveNode
  quantity: emissions
  unit: kt/a
  input_dimensions: [ghg, scope]
  output_dimensions: [ghg, scope]
  color: '#4E79A7'
  output_nodes:
  - id: net_emissions
    to_dimensions:
    - id: sector
      categories: [buildings]
    - id: ghg
    - id: scope

# ----------------- Building stock ----------------------

- id: existing_building_stock
  name: Existing building stock
  description: 'Data sources:<ul><li>Model inputs & assumptions, F250. Size of building stock. 
    </li><li>Model inputs & assumptions, F519. Rate of demolition and new construction.</li><li>Model inputs & assumptions, F257. Retrofitted area %.</li></ul>
    Calculations: The logic is that the floor area per inhabitant stays constant. Amount of construction is a fixed fraction of existing building stock and the difference between building stock increase and construction is assumed to be demolished. So, logically, construction must be greater than or equal to population growth.'
  type: gpc.DatasetNode
  quantity: floor_area
  unit: ksqm
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Total floor area (residental & non-residential)

- id: projected_building_stock
  name: Projected building stock
  type: simple.MultiplicativeNode
  quantity: floor_area
  unit: km**2
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: existing_building_stock
    tags: [non_additive]
  - id: population
    tags: [ratio_to_last_historical_value]
    to_dimensions: []

- id: new_building_shares_historical
  name: New building shares historical
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: 'Energy efficiency of new buildings, Share'
    inventory_only: true

- id: new_building_shares_goal
  name: New building shares goal
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets: [nzc/defaults]
  params:
    sector: Share of new buildings built with high energy efficiency standards

- id: new_building_shares
  name: New building shares
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets: [nzc/defaults]
  params:
    sector: Share of new buildings built # new building shares # 

- id: demolition_rate
  name: Demolition rate
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%/a'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
  - id: sector
    value: Demolition rate existing buildings

- id: demolished_building_stock
  name: Demolished building stock
  type: simple.MultiplicativeNode
  quantity: floor_area
  unit: km**2/a
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: projected_building_stock
    tags: [non_additive]
  - id: demolition_rate

- id: new_building_stock_total
  name: New building stock total
  type: simple.AdditiveNode
  quantity: floor_area
  unit: km**2/a
  input_nodes:
  - id: projected_building_stock
    tags: [difference]
    from_dimensions:
    - id: building_energy_class
      flatten: true
    to_dimensions: []
  - id: demolished_building_stock
    from_dimensions:
    - id: building_energy_class
      flatten: true
    to_dimensions: []

- id: new_building_stock
  name: New building stock
  type: simple.MultiplicativeNode
  quantity: floor_area
  unit: km**2/a
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: new_building_stock_total
    tags: [non_additive]
    to_dimensions: []
  - id: new_building_shares

- id: building_stock
  name: Building stock
  description: Existing building stock minus demolition plus new construction.
  type: simple.AdditiveNode
  quantity: floor_area
  unit: km**2
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: existing_building_stock
    tags: [extend_values]
  - id: new_building_stock
    tags: [cumulative]
  - id: demolished_building_stock
    tags: [arithmetic_inverse, cumulative]
  - id: renovated_building_stock
    tags: [extend_values, cumulative]
    to_dimensions:
    - id: building_energy_class

- id: old_building_renovation_rate_historical
  name: Old building renovation rate historical
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%/a'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Share of building stock renovated each year  # This is also rate for appliance efficiency renovations

- id: old_building_renovation_rate_goal
  name: Old building renovation rate goal
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%/a'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Renovation rate - decarbonisation scenario

- id: old_building_renovation_rate
  name: Old building renovation rate
  description: Shifts building stock from non-renovated to minor or agressively renovated stock. The effect is cumulative, i.e. the renovated stock stays permanently in the new category and thus the stock accumulates to renovated categories.
  type: simple.AdditiveNode
  quantity: fraction
  unit: '%/a'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: old_building_renovation_rate_historical
    to_dimensions:
    - id: building_energy_class

- id: renovation_intensity_shares_historical
  name: Renovation intensity shares historical
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Renovations Actual share of market in baseline scenario

- id: renovation_intensity_shares_goal
  name: Renovation intensity shares goal
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Assumed share of type of renovation in lever

- id: renovation_intensity_shares
  name: Renovation intensity shares
  type: simple.AdditiveNode
  quantity: fraction
  unit: '%'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: renovation_intensity_shares_historical

- id: renovated_building_stock
  name: Renovated building stock
  type: simple.MultiplicativeNode
  quantity: floor_area
  unit: km**2/a
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: existing_building_stock
    tags: [non_additive]
    from_dimensions:
    - id: building_energy_class
      categories: [old_no_renovations]
      flatten: true
    to_dimensions: []
  - id: old_building_renovation_rate
    from_dimensions:
    - id: building_energy_class
      flatten: true
    to_dimensions: []
  - id: renovation_intensity_shares

# --------------------- Heating ---------------------

# TODO Rename shares better
- id: total_building_heat_energy_use  # TODO Calculate non-electric heating floor area and use  that for EUI.
  name: Total building heat energy use
  type: gpc.DatasetNode
  quantity: energy
  unit: GWh/a
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Total heating demand (space heating + domestic hot water + heat for cooking)

- id: energy_use_intensity_data
  name: Energy use intensity data for heating
  type: gpc.DatasetNode
  quantity: energy_factor
  unit: kWh/m**2/a
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: energy use intensity

- id: energy_use_intensity_ratio
  name: Energy use intensity ratio for heating
  description: Relative energy use intensity by building energy class. Old, no renovations gets value 1.
  type: simple.AdditiveNode
  quantity: energy_factor
  unit: dimensionless
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes: [energy_use_intensity_data]
  params:
    use_input_node_unit_when_adding: true
    reference_category: 'building_energy_class:old_no_renovations'

- id: energy_use_intensity_relative_old
  name: Relative energy use intensity of existing building classes
  type: gpc.DatasetNode
  quantity: fraction
  unit: dimensionless
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Energy efficiency improvements from building renovations

- id: energy_use_intensity_old
  name: Energy use intensity of existing buildings
  type: simple.MultiplicativeNode
  quantity: energy_factor
  unit: kWh/m**2/a
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: total_building_heat_energy_use
    to_dimensions: []
  - id: existing_building_stock
    tags: [geometric_inverse]
    from_dimensions:
    - id: building_energy_class
      flatten: true
    to_dimensions: []
  - id: energy_use_intensity_ratio
    tags: [non_additive]
    from_dimensions:
    - id: building_energy_class
      categories: [old_no_renovations]
      flatten: true
    to_dimensions: []
  - id: energy_use_intensity_relative_old
    tags: [complement]
  - id: building_heating_shares_pre
    tags: [geometric_inverse, inventory_only, extend_values]
    from_dimensions:
    - id: heating_type
      flatten: true
    - id: energy_carrier
      flatten: true
    - id: fuel_type
      flatten: true
    to_dimensions: []

- id: energy_use_intensity_change_new
  name: Energy use intensity change for new buildings
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Improvement in energy efficiency relative to minimum requirement

- id: energy_use_intensity_new
  name: Energy use intensity for heating of new buildings
  type: simple.MultiplicativeNode
  quantity: energy_factor
  unit: kWh/m**2/a
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: energy_use_intensity_data
    tags: [non_additive]
  - id: energy_use_intensity_change_new
    tags: [complement]

- id: energy_use_intensity
  name: Energy use intensity excluding electricity
  type: simple.AdditiveNode
  quantity: energy_factor
  unit: kWh/m**2/a
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: energy_use_intensity_new
  - id: energy_use_intensity_old

# - id: electric_heating_type_shares
#   name: Electric heating type shares
#   type: gpc.DatasetNode
#   quantity: fraction
#   unit: '%'
#   input_dimensions: [fuel_type, heating_type, energy_carrier, scope]
#   output_dimensions: [fuel_type, heating_type, energy_carrier, scope]
#   input_datasets:
#   - id: nzc/defaults
#   params:
#     sector: Share of heating electricity

- id: building_heating_type_share_historical
  name: Building heating type share historical
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [heating_type]
  output_dimensions: [heating_type]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Heating technologies

- id: building_heating_type_share_goal
  name: District heating share goal
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  group: buildings
  input_dimensions: [heating_type]
  output_dimensions: [heating_type]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Heating technologies in 2030

- id: building_heating_type_share
  name: Building heating type shares of local vs. district
  type: simple.AdditiveNode
  quantity: fraction
  unit: '%'
  group: buildings
  input_dimensions: [heating_type]
  output_dimensions: [heating_type]
  input_nodes:
  - id: building_heating_type_share_historical

- id: heating_fuel_share_historical
  name: Heating fuel share historical
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [energy_carrier, heating_type, fuel_type]
  output_dimensions: [energy_carrier, heating_type, fuel_type]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Share of heating fuel

- id: heating_fuel_share_goal
  name: Heating fuel share goal
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [heating_type, fuel_type, energy_carrier]
  output_dimensions: [heating_type, fuel_type, energy_carrier]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Share of heating in 2030

- id: heating_fuel_share
  name: Heating energy carrier shares  # TODO update ids to match names
  type: simple.AdditiveNode
  quantity: fraction
  unit: '%'
  input_dimensions: [heating_type, fuel_type, energy_carrier]
  output_dimensions: [heating_type, fuel_type, energy_carrier]
  input_nodes:
  - id: heating_fuel_share_historical

- id: heating_fossil_share_historical
  name: Heating fossil shares historical
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [fuel_type, heating_type, energy_carrier]
  output_dimensions: [fuel_type, heating_type, energy_carrier]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Share of waste used in district heating that is fossil / non-fossil

- id: heating_fossil_share_goal
  name: Heating fossil shares goal
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [fuel_type, heating_type, energy_carrier]
  output_dimensions: [fuel_type, heating_type, energy_carrier]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Share of waste in 2030 used in district heating that is fossil / non-fossil

- id: heating_waste_fossil_share
  name: Heating fossil shares
  description: This node applies to fossil shares of waste used in district heating.
  type: simple.AdditiveNode
  quantity: fraction
  unit: '%'
  input_dimensions: [fuel_type, heating_type, energy_carrier]
  output_dimensions: [fuel_type, heating_type, energy_carrier]
  input_nodes:
  - id: heating_fossil_share_historical

- id: building_heating_shares_pre
  name: Building heating shares unadjusted
  type: simple.MultiplicativeNode
  quantity: fraction
  unit: '%'
  input_dimensions: [heating_type, energy_carrier, fuel_type]
  output_dimensions: [heating_type, energy_carrier, fuel_type]
  input_nodes:
  - id: building_heating_type_share
    tags: [non_additive]
    to_dimensions:
    - id: heating_type
  - id: heating_fuel_share
    tags: [non_additive]
    to_dimensions:
    - id: heating_type
    - id: energy_carrier
    - id: fuel_type

- id: waste_energy_fraction
  name: Waste energy fraction of total building energy
  type: simple.MultiplicativeNode
  quantity: fraction
  unit: '%'
  input_dimensions: [heating_type, energy_carrier, fuel_type]
  output_dimensions: [heating_type, energy_carrier, fuel_type]
  input_nodes:
  - id: building_heating_shares_pre
    tags: [non_additive]
    from_dimensions:
    - id: energy_carrier
      categories: [waste]
    - id: fuel_type
      flatten: true
    to_dimensions:
    - id: heating_type
    - id: energy_carrier
  - id: heating_waste_fossil_share
    tags: [non_additive]
    to_dimensions:
    - id: heating_type
    - id: energy_carrier
    - id: fuel_type

- id: building_heating_shares
  name: Building heating shares
  type: simple.AdditiveNode
  quantity: fraction
  unit: '%'
  input_dimensions: [heating_type, energy_carrier, fuel_type]
  output_dimensions: [heating_type, energy_carrier, fuel_type]
  input_nodes:
  - id: building_heating_shares_pre
    from_dimensions:
    - id: fuel_type
      categories: [mixed]
      exclude: true
  - id: waste_energy_fraction

- id: scope_of_energy_carriers
  name: Scope of energy carriers
  type: gpc.DatasetNode
  quantity: fraction
  unit: dimensionless
  input_dimensions: [scope, heating_type, energy_carrier]
  output_dimensions: [scope, heating_type, energy_carrier]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Scope of energy carriers

- id: building_heat_energy_use
  name: Building heat energy use
  description: Building heat energy consumed for building heating, hot water, and cooking. Note that for heat pumps, this is the amount of heat produced, not the amount of electricity consumed.
  type: simple.MultiplicativeNode
  quantity: energy
  unit: GWh/a
  input_dimensions: [heating_type, building_energy_class, energy_carrier, fuel_type, scope]
  output_dimensions: [heating_type, building_energy_class, energy_carrier, fuel_type, scope]
  input_nodes:
  - id: building_stock
    to_dimensions:
    - id: building_energy_class
  - id: energy_use_intensity
    to_dimensions:
    - id: building_energy_class
  - id: building_heating_shares
    to_dimensions:
    - id: heating_type
    - id: energy_carrier
    - id: fuel_type
  - id: scope_of_energy_carriers
    to_dimensions:
    - id: scope
    - id: heating_type
    - id: energy_carrier

- id: efficiency_of_heat_pumps
  name: Efficiency of heat pumps
  type: gpc.DatasetNode
  quantity: energy_factor
  unit: MWh/MWh
  input_dimensions: [fuel_type, energy_carrier]
  output_dimensions: [fuel_type, energy_carrier]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Efficiency of heat pumps

- id: building_heat_electricity_use
  name: Building heat electricity use
  description: Electricity used to produce heat with heat pumps and direct electricity.
  type: simple.MultiplicativeNode
  quantity: energy
  unit: GWh/a
  input_dimensions: [fuel_type, heating_type, building_energy_class, energy_carrier, scope]
  output_dimensions: [fuel_type, heating_type, building_energy_class, energy_carrier, scope]
  input_nodes:
  - id: building_heat_energy_use
    tags: [non_additive]
    from_dimensions:
    - id: fuel_type
      flatten: true
    - id: energy_carrier
      categories: [electricity]
    to_dimensions:
    - id: building_energy_class
    - id: heating_type
    - id: energy_carrier
    - id: scope
  - id: building_heating_shares_pre
    to_dimensions:
    - id: heating_type
    - id: energy_carrier
    - id: fuel_type
  - id: efficiency_of_heat_pumps
    tags: [geometric_inverse]
    to_dimensions:
    - id: fuel_type
    - id: energy_carrier
  output_nodes:
  - id: total_electricity_consumption_uncorr
    from_dimensions:
    - id: fuel_type
      flatten: true
    - id: heating_type
      flatten: true
    - id: building_energy_class
      flatten: true
    - id: scope
      flatten: true
    to_dimensions:
    - id: energy_carrier
    - id: sector
      categories: [electricity]  # TODO You may want to change the categorisation some day

- id: average_heating_emission_factor
  name: Average heating emission factor
  description: Emission factor for building heating. Averaged over all heating types currently in use.
  type: gpc.DatasetNode
  quantity: emission_factor
  unit: g/kWh
  input_dimensions: [pollutant, heating_type]
  output_dimensions: [pollutant, heating_type]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Emission factors from heat production

- id: building_heat_fossil_energy
  name: Building heat fossil energy
  type: simple.AdditiveNode
  quantity: energy
  unit: GWh/a
  input_dimensions: [heating_type, fuel_type]
  output_dimensions: [heating_type, fuel_type]
  input_nodes:
  - id: building_heat_energy_use
    from_dimensions:
    - id: building_energy_class
      flatten: true
    - id: scope
      flatten: true
    - id: energy_carrier
      categories: [electricity]
      exclude: true
      flatten: true
    to_dimensions:
    - id: heating_type
    - id: fuel_type

- id: building_heat_fossil_ratio
  name: Building heat fossil ratio
  type: simple.MultiplicativeNode
  quantity: fraction
  unit: dimensionless
  input_dimensions: [heating_type, fuel_type]
  output_dimensions: [heating_type, fuel_type]
  input_nodes:
  - id: building_heat_energy_use
    tags: [geometric_inverse, inventory_only]
    from_dimensions:
    - id: building_energy_class
      flatten: true
    - id: scope
      flatten: true
    - id: energy_carrier
      categories: [electricity]
      exclude: true
      flatten: true
    - id: fuel_type
      flatten: true
    to_dimensions:
    - id: heating_type
  - id: building_heat_fossil_energy
    tags: [inventory_only]

- id: heating_emission_factor
  name: Heating emission factor
  description: Emission factor for building heating. This applies only to fossil fuel types, as non-fossil fuels are assumed to have zero emissions.
  type: simple.MultiplicativeNode
  quantity: emission_factor
  unit: g/kWh
  input_dimensions: [pollutant, heating_type, fuel_type]
  output_dimensions: [pollutant, heating_type, fuel_type]
  input_nodes:
  - id: average_heating_emission_factor
    tags: [non_additive]
    to_dimensions:
    - id: pollutant
    - id: heating_type
  - id: building_heat_fossil_ratio
    tags: [geometric_inverse, empty_to_zero, extend_values]
    from_dimensions:
    - id: fuel_type
      categories: [fossil]
    to_dimensions:
    - id: heating_type
    - id: fuel_type

- id: building_heating_emissions
  name: Building heating emissions
  description: Building heating emissions exclude emissions from electricity, which are calculated elsewhere.
  type: simple.MultiplicativeNode
  quantity: emissions
  unit: kt/a
  input_dimensions: [heating_type, fuel_type, pollutant, scope]
  output_dimensions: [heating_type, fuel_type, pollutant, scope]
  input_nodes:
  - id: building_heat_energy_use
    from_dimensions:
    - id: building_energy_class
      flatten: true
    - id: energy_carrier
      categories: [electricity]
      exclude: true
      flatten: true
    # - id: fuel_type
    #   flatten: true
    to_dimensions:
    - id: heating_type
    - id: scope
    - id: fuel_type
  - id: heating_emission_factor
    to_dimensions:
    - id: pollutant
    - id: heating_type
    - id: fuel_type
  output_nodes:
  - id: building_emissions
    from_dimensions:
    - id: pollutant
      categories: [co2]
      flatten: true
    - id: heating_type
      flatten: true
    - id: fuel_type
      flatten: true
    to_dimensions:
    - id: ghg
      categories: [co2e]
    - id: scope

- id: new_building_current_unit_price
  name: Building current unit price
  type: gpc.DatasetNode
  quantity: unit_price
  unit: EUR/m**2
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Building costs - new buildings

- id: new_building_unit_price
  name: New building unit price
  type: costs.ExponentialNode
  quantity: unit_price
  unit: EUR/m**2
  input_dimensions: [building_energy_class]
  output_dimensions: [building_energy_class]
  input_nodes:
  - id: new_building_current_unit_price
  params:
  - id: annual_change  # TODO from nzc/defaults Cost improvements - new buildings
    value: -1.024671139
    unit: '%'

- id: new_building_cost_shares
  name: Building current cost shares
  type: gpc.DatasetNode
  quantity: fraction
  unit: dimensionless
  input_dimensions: [stakeholder, cost_type]
  output_dimensions: [stakeholder, cost_type]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: investment costs in new buildings

- id: new_building_cost
  name: New building cost
  type: simple.MultiplicativeNode
  quantity: currency
  unit: MEUR/a
  input_dimensions: [building_energy_class, stakeholder, cost_type]
  output_dimensions: [building_energy_class, stakeholder, cost_type]
  input_nodes:
  - id: new_building_stock
    to_dimensions:
    - id: building_energy_class
  - id: new_building_unit_price
    to_dimensions:
    - id: building_energy_class
  - id: new_building_cost_shares
    to_dimensions:
    - id: stakeholder
    - id: cost_type

# --------------- Emissions ------------

- id: building_air_pollutant_emissions
  name: Building air pollutant emissions
  type: simple.AdditiveNode
  quantity: emissions
  unit: t/a
  input_dimensions: [pollutant]
  output_dimensions: [pollutant]
  input_nodes:
  - id: building_heating_emissions
    from_dimensions:
    - id: heating_type
      flatten: true
    - id: scope
      flatten: true
    - id: fuel_type
      flatten: true
    - id: pollutant
      categories: [nox, pm25_combustion, pm10_combustion]

# --------------- Costs ----------------

- id: jobs_per_renovation_investment
  name: Jobs per renovation investment
  type: gpc.DatasetNode
  quantity: unit_price
  unit: jobs/(MEUR/a)
  input_datasets: [nzc/defaults]
  params:
    sector: Jobs created by investment in renovation

- id: jobs_created_by_renovations
  name: Jobs created by renovations
  type: simple.MultiplicativeNode
  quantity: employment
  unit: jobs
  input_nodes:
  - id: old_building_renovation_costs
    from_dimensions:
    - id: stakeholder
      flatten: true
    - id: building_energy_class
      flatten: true
    - id: cost_type
      flatten: true
  - id: jobs_per_renovation_investment
  output_nodes:
  - id: total_jobs_created

- id: air_pollutant_distance_index
  name: Air pollutant distance index
  type: gpc.DatasetNode
  quantity: fraction
  unit: dimensionless
  input_dimensions: [pollutant, heating_type, area_distance]
  output_dimensions: [pollutant, heating_type, area_distance]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Air pollutant distance index

- id: building_air_pollution_cost
  name: Building air pollution cost
  type: simple.MultiplicativeNode
  quantity: currency
  unit: MEUR/a
  input_dimensions: [pollutant, heating_type, area_distance, cost_type, stakeholder]
  output_dimensions: [pollutant, heating_type, area_distance, cost_type, stakeholder]
  input_nodes:
  - id: building_air_pollutant_emissions
    to_dimensions:
    - id: pollutant
  - id: air_pollutant_distance_index
    to_dimensions:
    - id: pollutant
    - id: heating_type
    - id: area_distance
  - id: air_pollution_unit_price
    to_dimensions:
    - id: pollutant
    - id: cost_type
    - id: area_distance
  - id: co_benefit_cost_shares
    to_dimensions:
    - id: cost_type
    - id: stakeholder
  output_nodes:
  - id: building_cost
    from_dimensions:
    - id: pollutant
      flatten: true
    - id: area_distance
      flatten: true
    - id: heating_type
      flatten: true
    to_dimensions:
    - id: stakeholder
    - id: cost_type

- id: efficiency_programme_unit_price
  name: Efficiency programme unit price
  type: gpc.DatasetNode
  quantity: unit_price
  unit: EUR/m**2
  input_dimensions: [efficiency_programme, energy_carrier, cost_type]
  output_dimensions: [efficiency_programme, energy_carrier, cost_type]
  input_datasets:
  - id: nzc/defaults
    filters:
    - column: Energy carrier
      value: electricity
      drop_col: false
  params:
    sector: Cost of efficiency programme per m2

- id: old_building_renovation_unit_price
  name: Old building renovation unit price
  type: gpc.DatasetNode
  quantity: unit_price
  unit: EUR/m**2
  input_dimensions: [building_energy_class, cost_type]
  output_dimensions: [building_energy_class, cost_type]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: Cost of energy renovations

- id: old_building_cost_shares
  name: Old building cost shares
  type: gpc.DatasetNode
  quantity: fraction
  unit: dimensionless
  input_dimensions: [stakeholder, cost_type]
  output_dimensions: [stakeholder, cost_type]
  input_datasets:
  - id: nzc/defaults
  params:
    sector: building renovation investments

- id: old_building_renovation_costs
  name: Old building renovation costs
  type: simple.MultiplicativeNode
  quantity: currency
  unit: MEUR/a
  input_dimensions: [building_energy_class, cost_type, stakeholder]
  output_dimensions: [building_energy_class, cost_type, stakeholder]
  input_nodes:
  - id: old_building_renovation_unit_price
    to_dimensions:
    - id: building_energy_class
    - id: cost_type
  - id: old_building_cost_shares
    to_dimensions:
    - id: stakeholder
    - id: cost_type
  - id: renovated_building_stock
    from_dimensions:
    - id: building_energy_class
      categories: [old_no_renovations]
      exclude: true
    to_dimensions:
    - id: building_energy_class
  output_nodes:
  - id: building_cost
    from_dimensions:
    - id: building_energy_class
      flatten: true

- id: efficiency_programme_cost
  name: Efficiency programme cost
  type: simple.MultiplicativeNode
  quantity: currency
  unit: MEUR/a
  input_dimensions: [efficiency_programme, energy_carrier, stakeholder, cost_type]
  output_dimensions: [efficiency_programme, energy_carrier, stakeholder, cost_type]
  input_nodes:
  - id: building_stock_by_electricity_renovation
    tags: [difference]
    to_dimensions:
    - id: energy_carrier
    - id: efficiency_programme
  - id: efficiency_programme_unit_price
    from_dimensions:
    - id: cost_type
      flatten: true
    to_dimensions:
    - id: energy_carrier
    - id: efficiency_programme
  - id: old_building_cost_shares  # CHECK
    to_dimensions:
    - id: stakeholder
    - id: cost_type

- id: heating_re_investment_fraction
  name: Heating re-investment fraction
  description: Share of current fossil production that would need to be re-invested in by 2030, if current production were to continue. (However, the calculations account for re-investments also after 2030, so the user can use their own timeline here as long as they interpret the results accordingly.)
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [heating_type, energy_carrier]
  output_dimensions: [heating_type, energy_carrier]
  input_datasets: [nzc/defaults]
  params:
    sector: Share of current fossil production that would need to be re-invested in by 2030, if current production where to continue

- id: new_heating_capacity_needed
  name: New heating capacity needed (differential investments)
  description: This the amount that is needed to invest or de-vest on heat production due to changes in production types compared with a situation where the production types remain constant. The investments needed in the constant situation are ignored here and only the difference is estimated.
  type: simple.MultiplicativeNode
  quantity: currency
  unit: GWh/a**2
  input_dimensions: [heating_type, energy_carrier]
  output_dimensions: [heating_type, energy_carrier]
  input_nodes:
  - id: building_heat_energy_use
    tags: [non_additive, difference]
    from_dimensions:
    - id: scope
      flatten: true
    - id: building_energy_class
      flatten: true
    - id: fuel_type
      flatten: true
    to_dimensions:
    - id: heating_type
    - id: energy_carrier
  - id: heating_re_investment_fraction
    to_dimensions:
    - id: heating_type
    - id: energy_carrier

- id: heating_cost_stakeholder_shares
  name: Heating cost stakeholder shares
  type: gpc.DatasetNode
  quantity: fraction
  unit: '%'
  input_dimensions: [stakeholder, cost_type, heating_type]
  output_dimensions: [stakeholder, cost_type, heating_type]
  input_datasets: [nzc/defaults]
  params:
    sector: heating costs

- id: new_heating_capacity_cost
  name: New heating capacity cost
  type: simple.MultiplicativeNode
  quantity: currency
  unit: MEUR/a
  input_dimensions: [energy_carrier, cost_type, heating_type, stakeholder]
  output_dimensions: [energy_carrier, cost_type, heating_type, stakeholder]
  input_nodes:
  - id: new_heating_capacity_needed
    to_dimensions:
    - id: heating_type
    - id: energy_carrier
  - id: heat_production_capital_unit_price
    to_dimensions:
    - id: cost_type
    - id: heating_type
    - id: energy_carrier
  - id: heating_cost_stakeholder_shares
    to_dimensions:
    - id: stakeholder
    - id: cost_type
    - id: heating_type
  - id: multiplier_node  # TODO
    to_dimensions: []
  output_nodes:
  - id: building_cost
    from_dimensions:
    - id: energy_carrier
      flatten: true
    - id: heating_type
      flatten: true

- id: consumer_heating_unit_price  # TODO Prices should be separated by energy_carrier but no data available.
  name: Consumer heating unit price
  type: gpc.DatasetNode
  quantity: unit_price
  unit: EUR/MWh
  input_datasets: [nzc/defaults]
  params:
    sector: Retail price of heating

- id: consumer_heating_cost
  name: Consumer heating cost (excluding electricity)
  type: simple.MultiplicativeNode
  quantity: currency
  unit: MEUR/a
  input_dimensions: [energy_carrier, stakeholder, cost_type, heating_type]
  output_dimensions: [energy_carrier, stakeholder, cost_type, heating_type]
  input_nodes:
  - id: consumer_heating_unit_price
    to_dimensions: []
  - id: building_heat_energy_use
    from_dimensions:
    - id: fuel_type
      flatten: true
    - id: scope
      flatten: true
    - id: building_energy_class
      flatten: true
    - id: energy_carrier
      categories: [electricity]
      exclude: true
    to_dimensions:
    - id: energy_carrier
    - id: heating_type
  - id: heating_cost_stakeholder_shares
    to_dimensions:
    - id: stakeholder
    - id: cost_type
    - id: heating_type
  output_nodes:
  - id: building_cost
    from_dimensions:
    - id: heating_type
      flatten: true
    - id: energy_carrier
      flatten: true

- id: heat_production_unit_price
  name: Heat production unit price
  type: gpc.DatasetNode
  quantity: unit_price
  unit: EUR/MWh
  input_dimensions: [energy_carrier, heating_type, cost_type]
  output_dimensions: [energy_carrier, heating_type, cost_type]
  input_datasets: [nzc/defaults]
  params:
    sector: (Un-levelised) costs of Decarbonised heating

- id: heat_production_cost
  name: Heat production cost
  type: simple.MultiplicativeNode
  quantity: currency
  unit: MEUR/a
  input_dimensions: [stakeholder, energy_carrier, heating_type, cost_type]
  output_dimensions: [stakeholder, energy_carrier, heating_type, cost_type]
  input_nodes:
  - id: heat_production_unit_price
    from_dimensions:
    - id: cost_type
      categories: [opex]      
    to_dimensions:
    - id: heating_type
    - id: cost_type
    - id: energy_carrier
  - id: building_heat_energy_use
    from_dimensions:
    - id: building_energy_class
      flatten: true
    - id: scope
      flatten: true
    - id: fuel_type
      flatten: true
    to_dimensions:
    - id: energy_carrier
    - id: heating_type
  - id: heating_cost_stakeholder_shares
    to_dimensions:
    - id: stakeholder
    - id: heating_type
    - id: cost_type
  output_nodes:
  - id: building_cost
    from_dimensions:
    - id: energy_carrier
      flatten: true
    - id: heating_type
      flatten: true
    to_dimensions:
    - id: stakeholder
    - id: cost_type

- id: heat_production_capital_unit_price
  name: Heat production capital unit price
  type: gpc.DatasetNode
  quantity: unit_price
  unit: EUR/MWh  # TODO Should this be EUR/(MWh/a)?
  input_dimensions: [energy_carrier, heating_type, cost_type]
  output_dimensions: [energy_carrier, heating_type, cost_type]
  input_datasets: [nzc/defaults]
  params:
    sector: Un-levelized capital cost of heating

- id: heat_production_capital_cost
  name: Heat production capital cost
  type: simple.MultiplicativeNode
  quantity: currency
  unit: MEUR/a
  input_dimensions: [stakeholder, energy_carrier, heating_type, cost_type]
  output_dimensions: [stakeholder, energy_carrier, heating_type, cost_type]
  input_nodes:
  - id: heat_production_capital_unit_price
    to_dimensions:
    - id: heating_type
    - id: cost_type
    - id: energy_carrier
  - id: building_heat_energy_use
    from_dimensions:
    - id: building_energy_class
      flatten: true
    - id: scope
      flatten: true
    - id: fuel_type
      flatten: true
    to_dimensions:
    - id: energy_carrier
    - id: heating_type
  - id: heating_cost_stakeholder_shares
    to_dimensions:
    - id: stakeholder
    - id: heating_type
    - id: cost_type
  output_nodes:
  - id: building_cost
    from_dimensions:
    - id: energy_carrier
      flatten: true
    - id: heating_type
      flatten: true
    to_dimensions:
    - id: stakeholder
    - id: cost_type

- id: heat_production_network_unit_price
  name: Heat production network unit price
  type: gpc.DatasetNode
  quantity: unit_price
  unit: EUR/MWh
  input_dimensions: [heating_type, cost_type]
  output_dimensions: [heating_type, cost_type]
  input_datasets: [nzc/defaults]
  params:
    sector: Un-levelized capital cost of heating network

- id: new_heating_network_cost
  name: New heating network cost
  type: simple.MultiplicativeNode
  quantity: currency
  unit: MEUR/a
  input_dimensions: [stakeholder, heating_type, cost_type]
  output_dimensions: [stakeholder, heating_type, cost_type]
  input_nodes:
  - id: new_heating_capacity_needed
    from_dimensions:
    - id: energy_carrier
      flatten: true
    to_dimensions:
    - id: heating_type
  - id: heat_production_network_unit_price
    to_dimensions:
    - id: heating_type
    - id: cost_type
  - id: heating_cost_stakeholder_shares
    from_dimensions:
    - id: cost_type
      categories: [capex]
      flatten: true
    to_dimensions:
    - id: stakeholder
    - id: heating_type
  - id: multiplier_node  # TODO
    to_dimensions: []
  output_nodes:
  - id: building_cost
    from_dimensions:
    - id: heating_type
      flatten: true
    to_dimensions:
    - id: stakeholder
    - id: cost_type

# ---------------- Summary ---------------------

- id: building_cost
  name: Building cost
  type: simple.AdditiveNode
  quantity: currency
  unit: MEUR/a
  input_dimensions: [stakeholder, cost_type]
  output_dimensions: [stakeholder, cost_type]
  input_nodes:
  - id: new_building_cost
    from_dimensions:
    - id: building_energy_class
      flatten: true
  - id: efficiency_programme_cost
    from_dimensions:
    - id: efficiency_programme
      flatten: true
    - id: energy_carrier
      flatten: true
    to_dimensions:
    - id: stakeholder
    - id: cost_type
  output_nodes:
  - total_cost

