name: Test the Django image

on:
  workflow_call:
    inputs:
      docker_image_repo:
        required: false
        type: string
        default: ${{ vars.DOCKER_IMAGE_REPO }}
      docker_image_tag:
        required: true
        type: string
      build_id:
        description: 'Unique ID for the build'
        required: true
        type: string
      s3_endpoint:
        description: 'S3 endpoint URL where to upload test artifacts'
        required: false
        type: string
      s3_bucket:
        description: 'S3 bucket'
        required: false
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

env:
  POSTGRES_PASSWORD: abcd
  POSTGRES_USER: app
  POSTGRES_DATABASE: app
  ELASTICSEARCH_PASSWORD: abcde

jobs:
  test:
    name: Run unit tests
    runs-on: runner-prod
    services:
      postgres:
        image: postgis/postgis:16-3.4-alpine
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DATABASE: ${{ env.POSTGRES_DATABASE }}
      elasticsearch:
        image: harbor.kausal.tech/library/elasticsearch:latest
        env:
          ELASTICSEARCH_PASSWORD: ${{ env.ELASTICSEARCH_PASSWORD }}

    container:
      image: ${{ inputs.docker_image_repo }}:${{ inputs.docker_image_tag }}
      env:
        DATABASE_URL: postgresql://${{env.POSTGRES_USER}}:${{env.POSTGRES_PASSWORD}}@localhost:5432/${{env.POSTGRES_DATABASE}}
        ELASTICSEARCH_URL: http://elastic:${{ env.ELASTICSEARCH_PASSWORD }}@localhost:9200

    steps:
      - name: Wait for DB
        run: /scripts/wait-for-it.sh localhost:5432 -t 30

      - name: Wait for ES
        run: /scripts/wait-for-it.sh localhost:9200 -t 30

      - name: Run tests
        run: /scripts/run-tests.sh
        working-directory: /code
        env:
          BUILD_S3_BUCKET: ${{ inputs.s3_bucket || vars.BUILD_S3_BUCKET }}
          BUILD_S3_ENDPOINT: ${{ inputs.s3_endpoint || vars.BUILD_S3_ENDPOINT }}
          PGHOST: localhost
          PGPORT: 5432
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
          PGUSER: ${{ env.POSTGRES_USER }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Install GPG for codecov
        run: |
          apt update && apt install --no-install-recommends -y gpg

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: kausaltech/kausal-paths
          override_commit: ${{ github.sha }}
          override_branch: ${{ github.ref }}
          files: /tmp/coverage.xml
          url: https://codecoverage.kausal.dev
